library(GradDesc)
library(GradDesc)
?gradient
?gradient
library(GradDesc)
?gradient
library(GradDesc)
?gradient
?fit_online_batch_Final
library(GradDesc)
?fit_online_batch_Final
?gradient
?fit
gradient_xy(data_ex, coef_ex)
#' The gradient of a function f for the parallelisation, denoted as âˆ‡f, is the collection of all its partial derivatives into a vector
#'
#' @param data dataframe required to perform the gradient descent
#' @param theta Coefficient matrix for logistic regression
#'
#' @export
#' @return Returns a gradient vector
#'
#' @examples
#' gradient_xy(data_ex, coef_ex)
gradient_xy <- function(data, theta) {
y <- as.matrix(data[,1])
x <- as.matrix(data[,2:ncol(data)])
sig <- sigmoid(x%*%theta)
gradient <- (t(x) %*% (sig-y)) / nrow(y)
return(gradient)
}
#' Sigmoid Function
#'
#' The sigmoid function is also called a squashing function as its domain is the set of all real numbers, and its range is (0, 1)
#'
#' @param x matrix of explanatory variables to predict
#'
#' @export
#' @return Returns a vector of positive / negative class membership probabilities
#' @examples
#' sigmoid(x)
sigmoid <- function(x){
return(1/(1+exp(-x)))
}
#'
#' @param x Matrix of explanatory variables to predict
#' @param y Target Variable Matrix
#' @param theta Coefficient matrix for logistic regression
#'
#' @export
#' @return Returns a gradient vector
#'
#' @examples
#' gradient(x, y, coef)
gradient <- function(x, y, theta) {
sig <- sigmoid(x%*%theta)
gradient <- (t(x) %*% (sig-y)) / nrow(y)
return(gradient)
}
